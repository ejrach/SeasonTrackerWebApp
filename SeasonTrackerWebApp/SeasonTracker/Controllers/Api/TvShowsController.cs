using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using SeasonTracker.Models;
using SeasonTracker.Dtos;
using AutoMapper;

namespace SeasonTracker.Controllers.Api
{
    public class TvShowsController : ApiController
    {
        private ApplicationDbContext _context;

        public TvShowsController()
        {
            _context = new ApplicationDbContext();
        }

        //We want to return a list of tv shows.
        //This is the convention built into ASP.NET Web API:
        // GET /api/tvshows
        public IHttpActionResult GetTvShows()
        {
            var tvShowDtos = _context.TvShows.ToList().Select(Mapper.Map<TvShow, TvShowDto>);

            return Ok(tvShowDtos);
        }

        //We want to return a single tv show.
        //This will respond to a request like this:
        // GET /api/tvshows/1
        public IHttpActionResult GetTvShow(int id)
        {
            //get the tv show
            var tvShow = _context.TvShows.SingleOrDefault(c => c.Id == id);

            //if the tvShow is not found
            if (tvShow == null)
                return NotFound();

            //otherwise return the member
            return Ok(Mapper.Map<TvShow, TvShowDto>(tvShow));
        }

        //To create a tv show, post a tv show to tv shows collection:
        // POST /api/tvshows
        [HttpPost]  //we do this because we are 'creating' a resource, not getting one.
        public IHttpActionResult CreateTvShow(TvShowDto tvShowDto)
        {
            //First we validate the object, and throw exception if model is not valid
            if (!ModelState.IsValid)
                return BadRequest();

            //We need to map the tvShowDto back to our domain model.
            var tvShow = Mapper.Map<TvShowDto, TvShow>(tvShowDto);

            //otherwise we add it to our context and save the changes
            _context.TvShows.Add(tvShow);
            _context.SaveChanges();

            tvShowDto.Id = tvShow.Id;

            //At this point the Id of the tv show will be generated by the server and be returned by the object.
            //As part of RESTful convention, we need to return the URI of the newly created resource to the client.
            //i.e. /api/members/10
            return Created(new Uri(Request.RequestUri + "/" + tvShow.Id), tvShowDto);

        }

        //To update a tvShow:
        // PUT /api/tvshows/1
        [HttpPut]
        public IHttpActionResult UpdateTvShow(int id, TvShowDto tvShowDto)
        {
            //First we validate the object, and throw exception if model is not valid
            if (!ModelState.IsValid)
                return BadRequest();

            var tvShowInDb = _context.TvShows.SingleOrDefault(c => c.Id == id);

            //It's possible that the client sends an invalid Id so we need to check for the existence of the object.
            if (tvShowInDb == null)
                return NotFound();

            Mapper.Map(tvShowDto, tvShowInDb);

            _context.SaveChanges();

            return Ok();
        }

        //To delete a tv show:
        // DELETE /api/tvshows/1
        [HttpDelete]
        public IHttpActionResult DeleteTvShow(int id)
        {
            var tvShowInDb = _context.TvShows.SingleOrDefault(c => c.Id == id);

            //It's possible that the client sends an invalid Id so we need to check for the existence of the object.
            if (tvShowInDb == null)
                return NotFound();

            _context.TvShows.Remove(tvShowInDb);

            _context.SaveChanges();

            return Ok();
        }
    }
}
