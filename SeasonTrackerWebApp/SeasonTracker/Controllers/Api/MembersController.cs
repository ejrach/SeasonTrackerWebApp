using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Data.Entity;
using System.Web.Http;
using SeasonTracker.Models;
using SeasonTracker.Dtos;
using AutoMapper;

/*
 * API Controller
 */
namespace SeasonTracker.Controllers.Api
{
    public class MembersController : ApiController
    {
        private ApplicationDbContext _context;

        public MembersController()
        {
            _context = new ApplicationDbContext();
        }

        /*
         * Method: In use
         */
        //We want to return a list of members.
        //This is the convention built into ASP.NET Web API:
        // GET /api/members
        // OR
        // GET /api/members?id=4
        //
        public IEnumerable<MemberDto> GetMembers(string query = null)
        {
            //In order to eager load the account type, we need to "include" it.
            //Because the member data context includes the AccountTypeId, this sort of cross-references it.
            //var memberDtos = _context.Members
            //    .Include(m => m.AccountType)
            //    .ToList()
            //    .Select(Mapper.Map<Member, MemberDto>);

            //return Ok(memberDtos);

            var membersQuery = _context.Members
                .Include(m => m.AccountType);

            if (!String.IsNullOrWhiteSpace(query))
                membersQuery = membersQuery.Where(m => m.Id == Convert.ToInt16(query));

            return membersQuery
                .ToList()
                .Select(Mapper.Map<Member, MemberDto>);
        }

        /*
         * Method: TBD
         */
        //We want to return a single member.
        //This will respond to a request like this:
        // GET /api/members/1
        public IHttpActionResult GetMember(int id)
        {
            //get the member
            var member = _context.Members
                .Include(m => m.AccountType)
                .SingleOrDefault(c => c.Id == id);

            //if the member is not found
            if (member == null)
                return NotFound();

            //otherwise return the member
            //TBD: need to return the view
            return Ok(Mapper.Map<Member, MemberDto>(member));
        }

        /*
         * Method: TBD
         */
        //To create a member, post a member to members collection:
        // POST /api/members
        [HttpPost]  //we do this because we are 'creating' a resource, not getting one.
        public IHttpActionResult CreateMember(MemberDto memberDto)
        {
            //First we validate the object, and throw exception if model is not valid
            if (!ModelState.IsValid)
                return BadRequest();

            //We need to map the memberDto back to our domain model.
            var member = Mapper.Map<MemberDto, Member>(memberDto);

            //otherwise we add it to our context and save the changes
            _context.Members.Add(member);
            _context.SaveChanges();

            memberDto.Id = member.Id;

            //At this point the Id of the member will be generated by the server and be returned by the object.
            //As part of RESTful convention, we need to return the URI of the newly created resource to the client.
            //i.e. /api/members/10
            return Created(new Uri(Request.RequestUri + "/" + member.Id), memberDto);

        }

        /*
         * Method: TBD
         */
        //To update a member:
        // PUT /api/members/1
        [HttpPut]
        public IHttpActionResult UpdateMember(int id, MemberDto memberDto)
        {
            //First we validate the object, and throw exception if model is not valid
            if (!ModelState.IsValid)
                return BadRequest();

            var memberInDb = _context.Members.SingleOrDefault(c => c.Id == id);

            //It's possible that the client sends an invalid Id so we need to check for the existence of the object.
            if (memberInDb == null)
                return NotFound();

            Mapper.Map(memberDto, memberInDb);

            _context.SaveChanges();

            return Ok();
        }

        /*
         * Method: In use
         */
        //To delete a member:
        // DELETE /api/members/1
        [HttpDelete]
        public IHttpActionResult DeleteMember(int id)
        {
            var memberInDb = _context.Members.SingleOrDefault(c => c.Id == id);

            //It's possible that the client sends an invalid Id so we need to check for the existence of the object.
            if (memberInDb == null)
                return NotFound();

            _context.Members.Remove(memberInDb);

            _context.SaveChanges();

            return Ok();
        }
    }
}
