using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Data.Entity;
using System.Web.Http;
using SeasonTracker.Models;
using SeasonTracker.Dtos;
using AutoMapper;

namespace SeasonTracker.Controllers.Api
{
    public class WatchListsController : ApiController
    {
        private ApplicationDbContext _context;

        public WatchListsController()
        {
            _context = new ApplicationDbContext();
        }

        //We want to return a list of watchlists.
        //This is the convention built into ASP.NET Web API:
        // GET /api/watchlists
        public IHttpActionResult GetWatchLists()
        {
            var watchListDtos = _context.WatchLists
                .ToList()
                .Select(Mapper.Map<WatchList, WatchListDto>);

            return Ok(watchListDtos);
        }

        //We want to return a list of watchlists based on the member Id.
        //This is the convention built into ASP.NET Web API:
        // GET /api/watchlists/member/6
        //TBD - will need to come back to later in the course. Might be able to solve with 
        //something like query string:
        //public IEnumerable<MovieDto> GetMovies(string query = null)
        //{
        //    var moviesQuery = _context.Movies
        //        .Include(m => m.Genre)
        //        .Where(m => m.NumberAvailable > 0);

        //    if (!String.IsNullOrWhiteSpace(query))
        //        moviesQuery = moviesQuery.Where(m => m.Name.Contains(query));

        //    return moviesQuery
        //        .ToList()
        //        .Select(Mapper.Map<Movie, MovieDto>);
        //}
        //[Route("api/watchlists/member/{id}")]      //Custom api route
        //public IHttpActionResult GetWatchListsByMember(int? id)
        //{
        //    var watchList = _context.WatchLists
        //        .Include(m => m.TvShow)
        //        .Where(m => m.Id == id)
        //        .SingleOrDefault();

        //    //var watchList = _context.Members
        //    //    .Include(m => m.WatchLists)
        //    //    .Where(m => m.Id == id)
        //    //    .SingleOrDefault();

        //    if (watchList == null)
        //        return (null);

        //    return Ok(Mapper.Map<WatchList,WatchListDto>(watchList));
        //}

        //We want to return a single watch list given by the watchlist Id.
        //This will respond to a request like this:
        // GET /api/watchlists/1
        public IHttpActionResult GetWatchList(int id)
        {
            //get the watch list
            var watchList = _context.WatchLists.SingleOrDefault(c => c.Id == id);

            //if the watchList is not found
            if (watchList == null)
                return NotFound();

            //otherwise return the watchList
            return Ok(Mapper.Map<WatchList, WatchListDto>(watchList));
        }

        //To create a watchlist, post a watchlist to watchlist collection:
        // POST /api/watchlists
        [HttpPost]  //we do this because we are 'creating' a resource, not getting one.
        public IHttpActionResult CreateWatchList(WatchListDto watchListDto)
        {
            //First we validate the object, and throw exception if model is not valid
            if (!ModelState.IsValid)
                return BadRequest();

            //We need to map the watchListDto back to our domain model.
            var watchList = Mapper.Map<WatchListDto, WatchList>(watchListDto);

            //otherwise we add it to our context and save the changes
            _context.WatchLists.Add(watchList);
            _context.SaveChanges();

            watchListDto.Id = watchList.Id;

            //At this point the Id of the watchlist will be generated by the server and be returned by the object.
            //As part of RESTful convention, we need to return the URI of the newly created resource to the client.
            //i.e. /api/watchlists/10
            return Created(new Uri(Request.RequestUri + "/" + watchList.Id), watchListDto);
        }

        //To update a watchlist:
        // PUT /api/watchlists/1
        [HttpPut]
        public IHttpActionResult UpdateWatchList(int id, WatchListDto watchListDto)
        {
            //First we validate the object, and throw exception if model is not valid
            if (!ModelState.IsValid)
                return BadRequest();

            var watchListInDb = _context.WatchLists.SingleOrDefault(c => c.Id == id);

            //It's possible that the client sends an invalid Id so we need to check for the existence of the object.
            if (watchListInDb == null)
                return NotFound();

            Mapper.Map(watchListDto, watchListInDb);

            _context.SaveChanges();

            return Ok();
        }

        //To delete a watchlist:
        // DELETE /api/watchlists/1
        [HttpDelete]
        public IHttpActionResult DeleteWatchList(int id)
        {
            var watchListInDb = _context.WatchLists.SingleOrDefault(c => c.Id == id);

            //It's possible that the client sends an invalid Id so we need to check for the existence of the object.
            if (watchListInDb == null)
                return NotFound();

            _context.WatchLists.Remove(watchListInDb);

            _context.SaveChanges();

            return Ok();
        }
    }
}
